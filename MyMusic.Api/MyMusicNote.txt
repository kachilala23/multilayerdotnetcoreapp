dotnet new solution
dotnet new webapi -o MyMusic.Api
dotnet new classlib -o MyMusic.Core
dotnet new classlib -o MyMusic.Services
dotnet new classlib -o MyMusic.Data

dotnet sln add MyMusic.Api/MyMusic.Api.csproj MyMusic.Core/MyMusic.Core.csproj 
MyMusic.Data/MyMusic.Data.csproj MyMusic.Services/MyMusic.Services.csproj

dotnet add MyMusic.Api/MyMusic.Api.csproj reference MyMusic.Core/MyMusic.Core.csproj 
MyMusic.Services/MyMusic.Services.csproj

dotnet add MyMusic.Data/MyMusic.Data.csproj reference MyMusic.Core/MyMusic.Core.csproj

dotnet add MyMusic.Data/MyMusic.Data.csproj reference MyMusic.Core/MyMusic.Core.csproj

dotnet add MyMusic.Services/MyMusic.Services.csproj reference MyMusic.Core/MyMusic.Core.csproj

dotnet add MyMusic.Api/MyMus/ic.Api.csproj reference 
MyMusic.Services/MyMusic.Services.csproj MyMusic.Core/MyMusic.Core.csproj MyMusic.Data/MyMusic.Data.csproj

Create models folder in Core project and add our two models Music and Artist.

Repository Pattern and Unit of Work

Repository Pattern

The Repository pattern, in simple words, is encapsulating your database operations 
(ORM or other methods of database access) in one place. Basically abstracting your 
data access layer. This has many advantages, such as:

    Reusability — You don’t need to rewrite code for accessing your database
    Testability — You can test your database actions without data access logic
    Separation of concerns — Your data access is responsibility only of the repository
    Decoupled code — If you want to change persistence framework, it requires less effort
    
A Unit of work is responsible for keeping track of the list of changes during a transaction and committing it.

Even though Entity Framework internally implements the repository pattern and unit of work pattern, 
it is a good practice to implement ourselves the repository to decouple our project from Entity Framework. 
This way we are not strongly bound to it and if we want to switch from this Entity Framework version to 
another or to another ORM framework, we require much less work to do so. Also it helps when mocking 
stuff for testing.

Services

Services will be the center of our business logic, the link between our API and our Data.

Data Project 

Entity Framework is a Object Relation Model (ORM) which basically maps all database 
tables and columns to C# objects, making it super easy to manage data and run queries.

We need the following nuget packages to help us make working with entity framework easy

dotnet add MyMusic.Data/MyMusic.Data.csproj package Microsoft.EntityFrameworkCore
dotnet add MyMusic.Data/MyMusic.Data.csproj package Microsoft.EntityFrameworkCore.Design
dotnet add MyMusic.Data/MyMusic.Data.csproj package  Microsoft.EntityFrameworkCore.SqlServer 

Configurations
Now we need to define how our models behavior, like constraints and relations.
We do this with configuration.

Next we create our DbContext

Repositories and Unit of work

Remember those interfaces we created in the Core project? Now it is time 
to implement them so we can have an interface with our DbContext.

Create a folder called Repositories.

First we implement the base repository (Repository.cs):

After having defining all basic operations, we are ready to implement the remaining two repositories. 
(Music and Artist Repository resectively)

And for last, our Unit of Work which will wrap all repositories in one place. 
Create a UnitOfWork.cs file in the project level.

And for last we just need to add dependency injection so our application knows 
that when we use the repository interfaces it should inject these repository implementions. 
And now we just need to add dependency injection for our Unit Of Work in the Startup.cs of our 
API project by adding the next code line to the ConfigureServices method:

Transient vs Scoped vs Singleton

You noticed that we added the dependency as Scoped. We have 3 types of dependency injection:

    Transient — Objects are different. One new instance is provided to every controller and every service
    Scoped — Objects are same through the request
    Singleton — Objects are the same for every request during the application lifetime
    
 Migrations
 
 We are almost over configuring Entity Framework.
 
 Now we need to add the connection strings and tell our API to use it.
 
 Go to appsettings.Development.json and add the ConnectionStrings.
 
 Using appsettings.Development.json because it is a dev environment. 
 What happens is when .NET Core is building, it checks every property in 
 appsettings.json that matches with the current environment one (this case Development) 
 and overrides these properties.
 
 And now we can create our migrations with the following command:
 
 dotnet ef --startup-project MyMusic.Api/MyMusic.Api.csproj migrations add InitialModel -p MyMusic.Data/MyMusic.Data.csproj

--startup-project switch tells that MyMusic.Api is the entry project for our app and switch -p 
tells that the target project of our migrations is MyMusic.Data. InitialModel is the name of this migration.

To update the database

dotnet ef --startup-project MyMusic.Api/MyMusic.Api.csproj database update 

Seed some data

For last we can add some dummy data to our database.

Just create an empty migration with

dotnet ef --startup-project MyMusic.Api/MyMusic.Api.csproj migrations add SeedMusicsAndArtistsTable -p MyMusic.Data/MyMusic.Data.csproj

Update database with
dotnet ef --startup-project MyMusic.Api/MyMusic.Api.csproj database update 

Services — Business Logic

We arrived at our Services layer, which is responsible for our business logic and interfacing with the Data 
Access layer. The key here is that we are gonna use the Unit Of Work to handle that interface so we don’t
have to go adding our DbContext directly.

As our API is has just simple CRUD operations, this section is not gonna be too long.

Here we will be needing just the implementation of the two services interfaces defined in Core, which are 
MusicService.cs and ArtistService.cs .

Doing so, we abstract our business logic from our presentation layer, which is our API.

And is just left to add dependency injection for our services as we did for the 
Unit of work by adding the next lines to Startup.cs :

API — Presenting our app

Finally it is time to build our presentation layer. Here we will handle API Restful calls, 
resource mappings and resources validation.
Swagger

First let’s add Swagger to our project to help us visualize our progress (finally). 
To do so just add Swashbuckle package to our API project with the net commands:

dotnet add MyMusic.Api/MyMusic.Api.csproj package Swashbuckle.AspNetCore --version 5.0.0-rc3

Note that we are adding a Release Candidate because the last stable Swashbuckle version does not support .NET Core 3

And for configuring we need to add the following commands to two methods in startup.cs

ConfigureServices method add:

Now, to test it, just run our application for the solutions folder with:

dotnet run -p MyMusic.Api/MyMusic.Api.csproj

We will see only the weather end point.

So because we dont want to return our models diectly we will be making use of resources (dto)
and making use of automaper to map our domain to our resources

dotnet add MyMusic.Api/MyMusic.Api.csproj package AutoMapper.Extensions.Microsoft.DependencyInjection

Enable AutoMapper by adding the next line to ConfigureServices in Startup.cs :

We need make sure that our parameters have the needed values to proceed, for that we will use 
FluentValidation by adding its package to our project with

dotnet add MyMusic.Api/MyMusic.Api.csproj package FluentValidation

Now we create a folder called Validators and add two files SaveArtistResourceValidator.cs and 
SaveMusicResourceValidator.cs .

And now for our CreateMusic method:
Updating a music
Deleting a music

Conclusion

This was a basic tutorial on how to leverage .NET Core and its powerful tools to create a 
multi layer and maintainable API. 

You learned how to separate your API structure in multiple module projects so we don’t have 
a high dependency in one technology.

You learned how to design a Core of an application, how to apply Repository and Unit Of Work pattern 
and how this helps you abstract the use of ORM.

Speaking of ORM, you learned how to use code first database design with Entity Framewok 
and to build it in a very good structure way.

You learned the value of a Business Layer that is not coupled to an specific ORM.

In API layer you learned how to not expose your models by using Resources, how 
to map them using AutoMapper, how to validate your inputs using 
FluentValidation and how to use Swagger to simplify your API display.

dotnet run -p MyMusic.Api/MyMusic.Api.csproj

 
